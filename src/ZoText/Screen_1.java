/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Screen_1.java
 *
 * Created on Dec 8, 2011, 11:14:45 PM
 */
package ZoText;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.xml.sax.SAXException;

/**
 *
 * @author C. Levallois
 */
public class Screen_1 extends javax.swing.JFrame {

    private boolean countHTML = false;
    private boolean countPDF = false;
    private boolean countOneDocName = false;
    private boolean countOneDocContent = false;
    private boolean fileSelected = true;
    private boolean countstopwordsIncluded = false;
    private String zoteroDir = ".";
    private String stopwordsFile;
    private boolean stopwordsFileSelected = false;
    private boolean ChooseAbstractsYes = false;
    private boolean ChooseAttachmentsYes = false;
    private boolean ChooseTitlesYes = false;
    /** Creates new form Screen_1 */
    public Screen_1() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        keyWordsBox = new javax.swing.JCheckBox();
        authorsBox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        onlyOneDocContent = new javax.swing.JCheckBox();
        selectFileStop = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        htmlInclude = new javax.swing.JCheckBox();
        pdfInclude = new javax.swing.JCheckBox();
        selectFileBiblio = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ChooseAttachments = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ChooseAbstracts = new javax.swing.JCheckBox();
        ChooseTitles = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        nameFileResults = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        launch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        keyWordsBox.setBackground(new java.awt.Color(255, 255, 255));
        keyWordsBox.setText("Tags (keywords)");

        authorsBox.setBackground(new java.awt.Color(255, 255, 255));
        authorsBox.setText("authors");

        jLabel10.setText("creates a plain text version of your zotero bibliography");

        onlyOneDocContent.setBackground(new java.awt.Color(255, 255, 255));
        onlyOneDocContent.setText("detect and exclude duplicate attachments");
        onlyOneDocContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyOneDocContentActionPerformed(evt);
            }
        });

        selectFileStop.setText("select");
        selectFileStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileStopActionPerformed(evt);
            }
        });

        jLabel6.setText("<html><b>4.</b> Optional: select a \"stopwords\" file</html>");

        jLabel7.setText("<html><i>A stopwords file contains a list of words which you want to <u>exclude</u> from the output. To create one, just open a new text document (.txt) and write a single word per line. Technical remark: Regular expressions are permitted. Then, come back here and select it. You can see an example of stopwords file <a href=\"http://www.clementlevallois.net/ZoText/stopwords.txt\">here.</a></html>");

        htmlInclude.setBackground(new java.awt.Color(255, 255, 255));
        htmlInclude.setText("include webpages");
        htmlInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlIncludeActionPerformed(evt);
            }
        });

        pdfInclude.setBackground(new java.awt.Color(255, 255, 255));
        pdfInclude.setText("include pdfs");
        pdfInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfIncludeActionPerformed(evt);
            }
        });

        selectFileBiblio.setText("select");
        selectFileBiblio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileBiblioActionPerformed(evt);
            }
        });

        jLabel1.setText("<html><b>1.</b> Select your Zotero bibliography</html>");

        jLabel5.setText("<html><b>3.</b> If you selected \"Attachments\", you can select these additional options:</html>");

        ChooseAttachments.setBackground(new java.awt.Color(255, 255, 255));
        ChooseAttachments.setText("Attachments");
        ChooseAttachments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseAttachmentsActionPerformed(evt);
            }
        });

        jLabel4.setText("<html><b>2.</b> Select the type of textual content you want to extract from it</html>");

        jLabel3.setFont(new java.awt.Font("Script MT Bold", 1, 48)); // NOI18N
        jLabel3.setText("Zotext");

        jLabel2.setText("<html><i>Your Zotero bibliography is a file called \"My Library.rdf\" located on your computer. It was created when you exported your Zotero bibliography. If you did not export it yet, close this application and follow <a href=\"http://www.zotero.org/support/kb/exporting\">these steps</a> then come back here.</i></html>");

        ChooseAbstracts.setBackground(new java.awt.Color(255, 255, 255));
        ChooseAbstracts.setText("Abstracts");
        ChooseAbstracts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseAbstractsActionPerformed(evt);
            }
        });

        ChooseTitles.setBackground(new java.awt.Color(255, 255, 255));
        ChooseTitles.setText("Titles (of articles, books, etc.)");
        ChooseTitles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseTitlesActionPerformed(evt);
            }
        });

        jLabel9.setText("<html><b>5.</b> Name of the file created for the results:</html>");

        nameFileResults.setText("ZoText_results.txt");
        nameFileResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFileResultsActionPerformed(evt);
            }
        });

        jLabel8.setText("<html><b>6.</b> Launch ZoText</html>");

        launch.setText("Launch");
        launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nameFileResults, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(launch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(authorsBox)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(selectFileBiblio))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ChooseAttachments)
                                .addGap(18, 18, 18)
                                .addComponent(ChooseTitles)
                                .addGap(18, 18, 18)
                                .addComponent(ChooseAbstracts)
                                .addGap(54, 54, 54)
                                .addComponent(keyWordsBox))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(selectFileStop))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(htmlInclude)
                                .addGap(18, 18, 18)
                                .addComponent(pdfInclude)
                                .addGap(18, 18, 18)
                                .addComponent(onlyOneDocContent)))))
                .addGap(0, 55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFileBiblio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChooseAttachments)
                    .addComponent(ChooseTitles)
                    .addComponent(ChooseAbstracts)
                    .addComponent(keyWordsBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(authorsBox)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(htmlInclude)
                    .addComponent(pdfInclude)
                    .addComponent(onlyOneDocContent))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFileStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameFileResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(launch))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFileBiblioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileBiblioActionPerformed
        if (evt.getSource() == selectFileBiblio) {
        System.out.println("openButton clicked");
    }
    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new java.io.File("D:\\Docs Pro Clement\\Writing\\Article Neuromarketing\\analysis\\Exported Items\\"));
    chooser.setDialogTitle("Choose the file created by the Zotero export: \"My Library.rdf\"");
    //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setAcceptAllFileFilterUsed(false);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory().getAbsolutePath());

        zoteroDir = chooser.getCurrentDirectory().getAbsolutePath();
        fileSelected = true;
        System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
    } else {
        System.out.println("No Selection");
    }
    }//GEN-LAST:event_selectFileBiblioActionPerformed

    private void ChooseAbstractsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseAbstractsActionPerformed
        if (evt.getSource() == ChooseAbstracts) {
            ChooseAbstractsYes = !ChooseAbstractsYes;
            System.out.println("abstracts chosen:"+ChooseAbstractsYes);
        }
    }//GEN-LAST:event_ChooseAbstractsActionPerformed

    private void ChooseAttachmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseAttachmentsActionPerformed
        if (evt.getSource() == ChooseAttachments) {
            ChooseAttachmentsYes = !ChooseAttachmentsYes;
            System.out.println("attachments chosen: "+ChooseAttachmentsYes);
        }
    }//GEN-LAST:event_ChooseAttachmentsActionPerformed

    private void ChooseTitlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseTitlesActionPerformed
        if (evt.getSource() == ChooseTitles) {
            ChooseTitlesYes = !ChooseTitlesYes;
            System.out.println("titles chosen: "+ChooseTitlesYes);

        }
    }//GEN-LAST:event_ChooseTitlesActionPerformed

    private void pdfIncludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfIncludeActionPerformed
        if (evt.getSource() == pdfInclude) {
            countPDF = !countPDF;
            System.out.println("pdf will be included: "+countPDF);            
        }
    }//GEN-LAST:event_pdfIncludeActionPerformed

    private void htmlIncludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlIncludeActionPerformed
        if (evt.getSource() == htmlInclude) {
            countHTML = !countHTML;
            System.out.println("webpages will be included: "+countHTML);            
        }
    }//GEN-LAST:event_htmlIncludeActionPerformed

    private void selectFileStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileStopActionPerformed
         if (evt.getSource() == selectFileStop) {

        
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("D:\\Docs Pro Clement\\Writing\\Article Neuromarketing\\analysis\\"));
        chooser.setDialogTitle("Choose the file containing stopwords (one per line, regex allowed)");
        //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory().getAbsolutePath());
            stopwordsFile = chooser.getSelectedFile().getAbsolutePath();
            stopwordsFileSelected = true;
            System.out.println("getSelectedFile() : " + chooser.getSelectedFile().getAbsolutePath());
        } else {
            System.out.println("No Selection ");
        }
         }
    }//GEN-LAST:event_selectFileStopActionPerformed

    private void launchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchActionPerformed
       if (evt.getSource() == launch) {


            if (fileSelected) {
                try {
                    System.out.println(String.valueOf(countHTML));
                    String[] args;
                    args = new String[11];
                    args[0] = String.valueOf(countHTML);
                    args[1] = String.valueOf(countPDF);
                    args[2] = String.valueOf(countOneDocContent);
                    args[3] = zoteroDir;
                    args[5] = String.valueOf(ChooseAbstractsYes);
                    args[6] = String.valueOf(ChooseTitlesYes);
                    args[7] = String.valueOf(ChooseAttachmentsYes);
                    args[8] = String.valueOf(keyWordsBox.isSelected());
                    args[9] = nameFileResults.getText();
                    args[10] = String.valueOf(authorsBox.isSelected());

                    if (stopwordsFileSelected) {

                        args[4] = stopwordsFile;
                    } else {
                        args[4] = "null";
                    }
                
                Mainthread.main(args);
                } catch (IOException ex) {
                    Logger.getLogger(Screen_1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(Screen_1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(Screen_1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XPathExpressionException ex) {
                    Logger.getLogger(Screen_1.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            
       }
    }//GEN-LAST:event_launchActionPerformed

    private void onlyOneDocContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyOneDocContentActionPerformed
        if (evt.getSource() == onlyOneDocContent) {
            countOneDocContent = !countOneDocContent;
            System.out.println("exclusion of duplicate documents: "+countOneDocContent);            
        }
    }//GEN-LAST:event_onlyOneDocContentActionPerformed

    private void nameFileResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFileResultsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFileResultsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Screen_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Screen_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Screen_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Screen_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Screen_1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ChooseAbstracts;
    private javax.swing.JCheckBox ChooseAttachments;
    private javax.swing.JCheckBox ChooseTitles;
    private javax.swing.JCheckBox authorsBox;
    private javax.swing.JCheckBox htmlInclude;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JCheckBox keyWordsBox;
    private javax.swing.JButton launch;
    private javax.swing.JTextField nameFileResults;
    private javax.swing.JCheckBox onlyOneDocContent;
    private javax.swing.JCheckBox pdfInclude;
    private javax.swing.JButton selectFileBiblio;
    private javax.swing.JButton selectFileStop;
    // End of variables declaration//GEN-END:variables
}
