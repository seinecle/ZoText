/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZotextGUI.java
 *
 * Created on Dec 5, 2011, 7:47:20 PM
 */
package ZoText;

/**
 *
 * @author C. Levallois
 */
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import javax.swing.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.xml.sax.SAXException;

public class ZotextGUI extends javax.swing.JFrame {

    private boolean countHTML = false;
    private boolean countPDF = false;
    private boolean countOneDocName = false;
    private boolean countOneDocContent = false;
    private boolean fileSelected = true;
    private boolean countstopwordsIncluded = false;
    private String zoteroDir = ".";
    private String stopwordsFile;
    private boolean stopwordsFileSelected = false;
    private boolean ChooseAbstractsYes = false;
    private boolean ChooseAttachmentsYes = false;
    private boolean ChooseTitlesYes = false;

    /** Creates new form ZotextGUI */
    public ZotextGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        htmlInclude = new javax.swing.JCheckBox();
        pdfInclude = new javax.swing.JCheckBox();
        onlyOneDocName = new javax.swing.JCheckBox();
        onlyOneDocContent = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        launch = new javax.swing.JButton();
        stopwordsIncluded = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ChooseAttachments = new javax.swing.JCheckBox();
        ChooseTitles = new javax.swing.JCheckBox();
        ChooseAbstracts = new javax.swing.JCheckBox();
        selectFileButton = new javax.swing.JButton();
        selectFileStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setEnabled(false);

        htmlInclude.setText("include html documents (web pages)");
        htmlInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlIncludeActionPerformed(evt);
            }
        });

        pdfInclude.setText("include pdf documents");
        pdfInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfIncludeActionPerformed(evt);
            }
        });

        onlyOneDocName.setText("keep only one instance of documents which have identical names");
        onlyOneDocName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyOneDocNameActionPerformed(evt);
            }
        });

        onlyOneDocContent.setText("keep only one instance of documents which have identical content");
        onlyOneDocContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyOneDocContentActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13));
        jLabel1.setText("1. Select the \"My Library.rdf\" file of the Zotero export");

        launch.setFont(new java.awt.Font("Tahoma", 1, 13));
        launch.setText("launch ZoText");
        launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchActionPerformed(evt);
            }
        });

        stopwordsIncluded.setText("exclude stopwords");
        stopwordsIncluded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopwordsIncludedActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13));
        jLabel2.setText("3. Optional: select a file containing stopwords");

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 2, 13));
        jTextPane1.setText("Stopwords are words which you want to exclude from the final output. You can specifiy a list of these words in a file. Create such a file in a text editor (like notepad), putting one word per line. Then select this file on your computer with the above button.");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel3.setText("ZoText");

        jLabel4.setText("by Clement Levallois - twitter: @seinecle");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13));
        jLabel5.setText("2. Select what textual information ZoText should extract from your bibliography");

        jLabel6.setText("4. ");

        ChooseAttachments.setText("Attachments");
        ChooseAttachments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseAttachmentsActionPerformed(evt);
            }
        });

        ChooseTitles.setText("Titles");
        ChooseTitles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseTitlesActionPerformed(evt);
            }
        });

        ChooseAbstracts.setText("Abstracts");
        ChooseAbstracts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseAbstractsActionPerformed(evt);
            }
        });

        selectFileButton.setText("select File");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileActionPerformed(evt);
            }
        });

        selectFileStop.setText("select File");
        selectFileStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileStopActionPerformed1(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(1048, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectFileStop)
                    .addComponent(selectFileButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ChooseAttachments)
                        .addGap(239, 239, 239)
                        .addComponent(ChooseTitles)
                        .addGap(209, 209, 209)
                        .addComponent(ChooseAbstracts))
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(580, 580, 580)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(launch))
                    .addComponent(onlyOneDocContent)
                    .addComponent(stopwordsIncluded)
                    .addComponent(pdfInclude)
                    .addComponent(htmlInclude)
                    .addComponent(onlyOneDocName))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel3)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(selectFileButton)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ChooseTitles)
                            .addComponent(ChooseAbstracts)
                            .addComponent(ChooseAttachments))
                        .addGap(95, 95, 95)
                        .addComponent(htmlInclude)
                        .addGap(18, 18, 18)
                        .addComponent(pdfInclude)
                        .addGap(18, 18, 18)
                        .addComponent(onlyOneDocName)
                        .addGap(18, 18, 18)
                        .addComponent(onlyOneDocContent)
                        .addGap(18, 18, 18)
                        .addComponent(stopwordsIncluded)
                        .addGap(77, 77, 77)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectFileStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(launch)
                            .addComponent(jLabel6))
                        .addGap(49, 49, 49)))
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void htmlIncludeActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if (evt.getSource() == htmlInclude) {
            countHTML = !countHTML;

        }
    }                                           

    private void pdfIncludeActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (evt.getSource() == pdfInclude) {
            countPDF = !countPDF;
        }
    }                                          

    private void onlyOneDocNameActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if (evt.getSource() == onlyOneDocName) {
            countOneDocName = !countOneDocName;
        }
    }                                              

    private void onlyOneDocContentActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if (evt.getSource() == onlyOneDocContent) {
            countOneDocContent = !countOneDocContent;
        }
    }                                                 

    private void launchActionPerformed(java.awt.event.ActionEvent evt) {                                       

        if (evt.getSource() == launch) {


            if (fileSelected) {
                System.out.println(String.valueOf(countHTML));
                String[] args;
                args = new String[8];
                args[0] = String.valueOf(countHTML);
                args[1] = String.valueOf(countPDF);
                args[2] = String.valueOf(onlyOneDocName);
                args[3] = zoteroDir;
                args[5] = String.valueOf(ChooseAbstractsYes);
                args[6] = String.valueOf(ChooseTitlesYes);
                args[7] = String.valueOf(ChooseAttachmentsYes);

                if (countstopwordsIncluded && stopwordsFileSelected) {

                    args[4] = stopwordsFile;
                } else {
                    args[4] = "null";
                }

                try {
                    Mainthread.main(args);
                } catch (IOException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XPathExpressionException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                }




            }


        }
    }                                      

    private void stopwordsIncludedActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if (evt.getSource() == stopwordsIncluded) {
            countstopwordsIncluded = !countstopwordsIncluded;
        }
    }                                                 

    private void ChooseAbstractsActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if (evt.getSource() == ChooseAbstracts) {
            ChooseAbstractsYes = !ChooseAbstractsYes;
        }
    }                                               

    private void ChooseTitlesActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if (evt.getSource() == ChooseTitles) {
            ChooseTitlesYes = !ChooseTitlesYes;
        }
    }                                            

    private void ChooseAttachmentsActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if (evt.getSource() == ChooseAttachments) {
            ChooseAttachmentsYes = !ChooseAttachmentsYes;
        }

    }                                                 

    private void fileStopwordsActionPerformed(java.awt.event.ActionEvent evt) {


    }
    
    

private void selectFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
    if (evt.getSource() == selectFileButton) {
        System.out.println("openButton clicked");
    }
    JFileChooser chooser = new JFileChooser();
    //chooser.setCurrentDirectory(new java.io.File("C:\\"));
    chooser.setDialogTitle("Choose the file created by the Zotero export: \"My Library.rdf\"");
    //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setAcceptAllFileFilterUsed(false);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory().getAbsolutePath());

        zoteroDir = chooser.getCurrentDirectory().getAbsolutePath();
        fileSelected = true;
        System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
    } else {
        System.out.println("No Selection");
    }
}                                          

    private void selectFileStopActionPerformed1(java.awt.event.ActionEvent evt) {                                                
                if (evt.getSource() == selectFileStop) {
            if (countstopwordsIncluded) {
                System.out.println("fileStopwords clicked");
            }
        }
        JFileChooser chooser = new JFileChooser();
//chooser.setCurrentDirectory(new java.io.File("C:\\"));
        chooser.setDialogTitle("Choose the file containing stopwords (one per line, regex allowed)");
//chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory().getAbsolutePath());

            stopwordsFile = chooser.getSelectedFile().getAbsolutePath();
            stopwordsFileSelected = true;
            System.out.println("getSelectedFile() : " + chooser.getSelectedFile().getAbsolutePath());
        } else {
            System.out.println("No Selection ");
        }

    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ZotextGUI().setVisible(true);
            }
        });
}
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox ChooseAbstracts;
    private javax.swing.JCheckBox ChooseAttachments;
    private javax.swing.JCheckBox ChooseTitles;
    private javax.swing.JCheckBox htmlInclude;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton launch;
    private javax.swing.JCheckBox onlyOneDocContent;
    private javax.swing.JCheckBox onlyOneDocName;
    private javax.swing.JCheckBox pdfInclude;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JButton selectFileStop;
    private javax.swing.JCheckBox stopwordsIncluded;
    // End of variables declaration                   


}
