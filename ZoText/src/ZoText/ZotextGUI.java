/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZotextGUI.java
 *
 * Created on Dec 5, 2011, 7:47:20 PM
 */
package ZoText;

/**
 *
 * @author C. Levallois
 */
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import javax.swing.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.xml.sax.SAXException;

public class ZotextGUI extends javax.swing.JFrame {

    private boolean countHTML = false;
    private boolean countPDF = false;
    private boolean countOneDocName = false;
    private boolean countOneDocContent = false;
    private boolean fileSelected = false;
    private boolean countstopwordsIncluded = false;
    private String zoteroDir = ".";
    private String stopwordsFile;
    private boolean stopwordsFileSelected = false;

    /** Creates new form ZotextGUI */
    public ZotextGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        htmlInclude = new javax.swing.JCheckBox();
        pdfInclude = new javax.swing.JCheckBox();
        onlyOneDocName = new javax.swing.JCheckBox();
        onlyOneDocContent = new javax.swing.JCheckBox();
        openButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        launch = new javax.swing.JButton();
        stopwordsIncluded = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        fileStopwords = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        htmlInclude.setText("include html documents (web pages)(option not working yet, html will always be included)");
        htmlInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlIncludeActionPerformed(evt);
            }
        });

        pdfInclude.setText("include pdf documents (option not working yet, pdf will always be included)");
        pdfInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfIncludeActionPerformed(evt);
            }
        });

        onlyOneDocName.setText("keep only one instance of documents which have identical names (option not working => duplicates always removed)");
        onlyOneDocName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyOneDocNameActionPerformed(evt);
            }
        });

        onlyOneDocContent.setText("keep only one instance of documents which have identical content (option not working => duplicates always removed)");
        onlyOneDocContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyOneDocContentActionPerformed(evt);
            }
        });

        openButton.setText("select file");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Click below to select the \"Exported Items.rdf\" file of the Zotero export");

        launch.setFont(new java.awt.Font("Tahoma", 1, 13));
        launch.setText("launch ZoText");
        launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchActionPerformed(evt);
            }
        });

        stopwordsIncluded.setText("exclude stopwords");
        stopwordsIncluded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopwordsIncludedActionPerformed(evt);
            }
        });

        jLabel2.setText("=> select the file with stopwords:");

        fileStopwords.setText("select file");
        fileStopwords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileStopwordsActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        jTextPane1.setText("Stopwords are words which you want to exclude from the final output. You can specifiy a list of these words in a file. Create such a file in a text editor (like notepad), putting one word per line. Then select this file on your computer with the above button.");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel3.setText("ZoText");

        jTextPane2.setEditable(false);
        jTextPane2.setText("ZoText takes your Zotero bibliography and extracts all text from it.. The resulting document can directly be fed into VosViewer, a software to visualize semantic maps (www.vosviewer.com)");
        jScrollPane2.setViewportView(jTextPane2);

        jLabel4.setText("by Clement Levallois - twitter: @seinecle");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(303, 303, 303)
                .addComponent(launch)
                .addContainerGap(434, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(592, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(openButton)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(fileStopwords))
                                .addComponent(stopwordsIncluded)
                                .addComponent(jLabel1)
                                .addComponent(pdfInclude)
                                .addComponent(htmlInclude)
                                .addComponent(onlyOneDocName)
                                .addComponent(onlyOneDocContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(32, 32, 32)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(openButton)
                .addGap(52, 52, 52)
                .addComponent(htmlInclude)
                .addGap(18, 18, 18)
                .addComponent(pdfInclude)
                .addGap(18, 18, 18)
                .addComponent(onlyOneDocName)
                .addGap(18, 18, 18)
                .addComponent(onlyOneDocContent)
                .addGap(18, 18, 18)
                .addComponent(stopwordsIncluded)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fileStopwords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(launch)
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    
    private void htmlIncludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlIncludeActionPerformed
        if (evt.getSource() == htmlInclude) {
            countHTML = !countHTML;
            //System.out.println(countHTML);
        }
    }//GEN-LAST:event_htmlIncludeActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if (evt.getSource() == openButton) {

            System.out.println("openButton clicked");
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("C:\\"));
            chooser.setDialogTitle("Choose the file created by the Zotero export: \"Exported Items.rdf\"");
            //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory().getAbsolutePath());
                zoteroDir = chooser.getCurrentDirectory().getAbsolutePath();
                fileSelected = true;

                System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
            } else {
                System.out.println("No Selection ");
            }


        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void pdfIncludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfIncludeActionPerformed
        if (evt.getSource() == pdfInclude) {
            countPDF = !countPDF;
            //System.out.println(String.valueOf(countPDF));
        }
    }//GEN-LAST:event_pdfIncludeActionPerformed

    private void onlyOneDocNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyOneDocNameActionPerformed
        if (evt.getSource() == onlyOneDocName) {
            countOneDocName = !countOneDocName;
        }
    }//GEN-LAST:event_onlyOneDocNameActionPerformed

    private void onlyOneDocContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyOneDocContentActionPerformed
        if (evt.getSource() == onlyOneDocContent) {
            countOneDocContent = !countOneDocContent;
        }
    }//GEN-LAST:event_onlyOneDocContentActionPerformed

    private void launchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchActionPerformed

        if (evt.getSource() == launch) {


            if (fileSelected) {
                System.out.println(String.valueOf(countHTML));
                String [] args;
                args = new String[5]; 
                //boolean [] bargs;
                args[0] = String.valueOf(countHTML);
                //bargs[0] = countHTML;
                //try{System.out.println("args0 is "+args[0]);}catch (NullPointerException e){System.out.println("allo!");}
                args[1] = String.valueOf(countPDF);
                args[2] = String.valueOf(onlyOneDocName);
                args[3] = zoteroDir;
                if (countstopwordsIncluded && stopwordsFileSelected){
                    
                    args[4] = stopwordsFile;
                }

                else {args[4] = "null";}
                
                try {
                    Mainthread.main(args);
                } catch (IOException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XPathExpressionException ex) {
                    Logger.getLogger(ZotextGUI.class.getName()).log(Level.SEVERE, null, ex);
                }




            }


        }
    }//GEN-LAST:event_launchActionPerformed

    private void stopwordsIncludedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopwordsIncludedActionPerformed
        if (evt.getSource() == stopwordsIncluded) {
            countstopwordsIncluded = !countstopwordsIncluded;
        }
    }//GEN-LAST:event_stopwordsIncludedActionPerformed

    private void fileStopwordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileStopwordsActionPerformed
        if (evt.getSource() == fileStopwords) {

            if (countstopwordsIncluded) {
                System.out.println("fileStopwords clicked");
                JFileChooser chooser = new JFileChooser();
                chooser.setCurrentDirectory(new java.io.File("C:\\"));
                chooser.setDialogTitle("Choose the file containing stopwords (one per line, regex allowed)");
                //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                chooser.setAcceptAllFileFilterUsed(false);

                if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory().getAbsolutePath());
                    stopwordsFile = chooser.getSelectedFile().getAbsolutePath();
                    stopwordsFileSelected = true;

                    System.out.println("getSelectedFile() : " + chooser.getSelectedFile().getAbsolutePath());
                } else {
                    System.out.println("No Selection ");
                }
            }

        }
    }//GEN-LAST:event_fileStopwordsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZotextGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ZotextGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fileStopwords;
    private javax.swing.JCheckBox htmlInclude;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JButton launch;
    private javax.swing.JCheckBox onlyOneDocContent;
    private javax.swing.JCheckBox onlyOneDocName;
    private javax.swing.JButton openButton;
    private javax.swing.JCheckBox pdfInclude;
    private javax.swing.JCheckBox stopwordsIncluded;
    // End of variables declaration//GEN-END:variables
}
